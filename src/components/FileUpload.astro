---
export interface Props {
  id: string;
  title: string;
  description: string;
  icon: string;
  accept: string;
}

const { id, title, description, icon, accept } = Astro.props;
---

<div class="card card-bordered border-dashed border-2 border-base-300 hover:border-primary transition-all cursor-pointer bg-base-100 hover:shadow-lg" id={`${id}Upload`}>
  <div class="card-body items-center text-center">
    <div class="text-5xl mb-4">{icon}</div>
    <h3 class="card-title text-xl">{title}</h3>
    <p class="text-base-content/70">{description}</p>
    <input type="file" id={`${id}Input`} accept={accept} class="hidden" />
    <div class="file-info mt-4 hidden badge badge-primary badge-lg"></div>
  </div>
</div>

<script define:vars={{ id }}>
  const uploadBox = document.getElementById(`${id}Upload`);
  const fileInput = document.getElementById(`${id}Input`);
  
  uploadBox.addEventListener('click', () => {
    fileInput.click();
  });
  
  // Drag and drop handlers
  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    uploadBox.addEventListener(eventName, (e) => {
      e.preventDefault();
      e.stopPropagation();
    }, false);
  });
  
  ['dragenter', 'dragover'].forEach(eventName => {
    uploadBox.addEventListener(eventName, () => {
      uploadBox.classList.add('border-primary', 'bg-primary/5');
    }, false);
  });
  
  ['dragleave', 'drop'].forEach(eventName => {
    uploadBox.addEventListener(eventName, () => {
      uploadBox.classList.remove('border-primary', 'bg-primary/5');
    }, false);
  });
</script>